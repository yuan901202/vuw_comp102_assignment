#BlueJ class context
comment0.params=
comment0.target=MiniDraw()
comment0.text=\ Constructor\ sets\ up\ the\ GUI\:\n\ \ sets\ the\ mouse\ listener\ and\ adds\ all\ the\ buttons\n
comment1.params=button
comment1.target=void\ buttonPerformed(java.lang.String)
comment1.text=\ Respond\ to\ button\ presses\n\ For\ New,\ Open,\ Save,\ and\ Color,\ call\ the\ appropriate\ method\ (see\ below)\n\ \ to\ perform\ the\ action\ immediately.\n\ For\ other\ buttons,\ store\ the\ button\ name\ in\ the\ currentAction\ field\n
comment10.params=changeX\ changeY
comment10.target=void\ resizeShape(double,\ double)
comment10.text=\ Resizes\ the\ current\ shape.\ A\ simple\ way\ of\ doing\ it\ is\ to\n\ \ \ \ resize\ the\ shape\ by\ the\ amount\ that\ the\ mouse\ was\ moved\n\ \ \ \ (ie\ from\ (fromX,\ fromY)\ to\ (toX,\ toY)).\ \n\ \ \ \ If\ the\ mouse\ is\ moved\ to\ the\ right,\ the\ shape\ should\n\ \ \ \ \ \ be\ made\ that\ much\ wider\ on\ each\ side;\ if\ the\ mouse\ is\ moved\ to\n\ \ \ \ \ \ the\ left,\ the\ shape\ should\ be\ made\ that\ much\ narrower\ on\ each\ side\n\ \ \ \ If\ the\ mouse\ is\ moved\ up,\ the\ shape\ should\ be\ made\n\ \ \ \ \ \ that\ much\ higher\ top\ and\ bottom;\ if\ the\ mouse\ is\ moved\ down,\ the\ shape\ \n\ \ \ \ \ \ should\ be\ made\ that\ much\ shorter\ top\ and\ bottom.\n\ \ \ \ The\ effect\ is\ that\ if\ the\ user\ drags\ from\ the\ top\ right\ corner\ of\n\ \ \ \ \ \ the\ shape,\ the\ shape\ should\ be\ resized\ to\ whereever\ the\ dragged\ to.\n
comment11.params=
comment11.target=void\ saveDrawing()
comment11.text=Ask\ the\ user\ to\ select\ a\ file\ and\ save\ the\ current\ drawing\ to\ the\ file.
comment12.params=
comment12.target=void\ openDrawing()
comment12.text=\ Ask\ the\ user\ for\ a\ file\ to\ open,\n\ \ then\ read\ all\ the\ shape\ descriptions\ into\ the\ current\ drawing.\ \n
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment2.params=mouseAction\ x\ y
comment2.target=void\ mousePerformed(java.lang.String,\ double,\ double)
comment2.text=\ When\ mouse\ is\ pressed,\ remember\ the\ position\ in\ fields\n\ \ \ and\ \ work\ out\ the\ index\ of\ the\ shape\ it\ is\ on\ (if\ any)\n\ \ \ and\ store\ this\ in\ a\ \ field\ (use\ the\ findShapeIndex(..)\ method)\n\ \ When\ the\ Mouse\ is\ released,\ depending\ on\ the\ currentAction,\n\ \ -\ perform\ the\ action\ (move,\ delete,\ or\ resize).\n\ \ \ \ move\ and\ resize\ are\ done\ on\ the\ shape\ \ where\ the\ mouse\ was\ pressed,\n\ \ \ \ delete\ is\ done\ on\ the\ shape\ where\ the\ mouse\ was\ released\ \n\ \ -\ construct\ the\ shape\ and\ add\ to\ the\ shapes\ array.\n\ \ It\ is\ easiest\ to\ call\ other\ methods\ (see\ below)\ to\ actually\ do\ the\ work,\n\ \ otherwise\ this\ method\ gets\ too\ big\!\n
comment3.params=
comment3.target=void\ drawDrawing()
comment3.text=\ Draws\ all\ the\ shapes\ in\ the\ list\ on\ the\ graphics\ pane\n\ \ \ \ \ \ \ \ First\ clears\ the\ graphics\ pane,\ then\ draws\ each\ shape,\n\ \ Finally\ repaints\ the\ graphics\ pane\n
comment4.params=x\ y
comment4.target=int\ findShapeIndex(double,\ double)
comment4.text=\ Checks\ each\ shape\ in\ the\ list\ to\ see\ if\ the\ point\ (x,y)\ is\ on\ the\ shape.\n\ \ \ It\ returns\ the\ index\ of\ the\ topmost\ shape\ for\ which\ this\ is\ true.\n\ \ Returns\ -1\ if\ there\ is\ no\ such\ shape.\n
comment5.params=
comment5.target=void\ selectColor()
comment5.text=\ Sets\ the\ current\ color.\n\ Asks\ user\ for\ a\ new\ color\ using\ a\ JColorChooser\ (see\ MiniPaint,\ Assig\ 6)\nAs\ long\ as\ the\ color\ is\ not\ null,\ it\ remembers\ the\ color
comment6.params=
comment6.target=void\ newDrawing()
comment6.text=\ Start\ a\ new\ drawing\ -\n\ \ initialise\ the\ shapes\ array\ and\ clear\ the\ graphics\ pane.\ \n
comment7.params=x1\ y1\ x2\ y2
comment7.target=void\ addShape(double,\ double,\ double,\ double)
comment7.text=\ If\ there\ is\ no\ room\ in\ the\ array,\ do\ nothing.\n\ \ \ \ Otherwise,\ \n\ \ \ \ Construct\ a\ new\ Shape\ object\ of\ the\ appropriate\ kind\n\ \ \ \ \ \ (depending\ on\ currentAction)\ using\ the\ appropriate\ constructor\n\ \ \ \ \ \ of\ the\ Line,\ Rectangle,\ Oval,\ or\ Dot\ classes.\n\ \ \ \ Adds\ the\ shape\ to\ the\ end\ of\ the\ collection\ of\ shapes\ in\ the\ drawing,\ and\nRe-draws\ the\ drawing
comment8.params=changeX\ changeY
comment8.target=void\ moveShape(double,\ double)
comment8.text=\ Moves\ the\ current\ shape\ (if\ there\ is\ one)\n\ \ to\ where\ the\ mouse\ was\ released.\n\ \ Ie,\ change\ its\ position\ by\ (toX-fromX)\ and\ (toY-fromY)\n
comment9.params=x\ y
comment9.target=void\ deleteShape(double,\ double)
comment9.text=\ Finds\ the\ shape\ that\ was\ under\ the\ mouseReleased\ position\ (x,\ y)\n\ \ and\ then\ removes\ it\ from\ the\ array\ of\ shapes,\ moving\ later\ shapes\ down.\ \n
numComments=14
